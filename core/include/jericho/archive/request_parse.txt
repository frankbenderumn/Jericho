// void parse(std::string url, Route* route) {
//     route->url = url;
//     std::string signature = "";
//     if (url.find("?") != std::string::npos) {
//         std::string::size_type const p(url.find_first_of('?'));
//         std::string path = url.substr(0, p);
//         std::string args_str = url.substr(p+1, url.size());
//         if (path.find("://") != std::string::npos) {
//             std::string::size_type const p2(path.find("://"));
//             std::string protocol = path.substr(0, p2);
//             path = path.substr(p2+3);
//             printf("protocol is: %s\n", protocol.c_str());
//             route->protocol = protocol;
//             printf("path is: %s\n", path.c_str());
//             route->path = path;
//         }
//         std::vector<std::string> dirs = tokenize(path, '/');
//         dirs[0] = "/" + dirs[0];
//         std::vector<std::string> wildcards = {};
//         for (auto d : dirs) {
//             if (d.at(0) == ':') {
//                 wildcards.push_back(d);
//                 signature += "x";
//             }
//             dirs.push_back(d);
//             int sym = _router->registerSymbol(d);
//             signature += std::to_string(sym) + "-";
//             printf("dir: %s\n", d.c_str());
//         }
//         std::vector<std::string> args = tokenize(args_str, '&');
//         route->args = args;
//         route->wildcards = wildcards;
//         for (auto w : wildcards) {
//             printf("wc: %s\n", w.c_str());
//         }
//         for (auto arg : args) {
//             printf("arg: %s\n", arg.c_str());
//             std::vector<std::string> kv = tokenize(arg, "=");
//             route->kvs[kv[0]] = kv[1];
//         }
//         signature.pop_back();
//         route->signature = signature;
//         printf("signature: %s\n", signature.c_str());
//     }
// }

// void parse_path(std::string path, Route* request) {
//     std::string signature = "";
//     std::vector<std::string> dirs = tokenize(path, '/');
//     // dirs[0] = "/" + dirs[0];
//     std::vector<std::string> wildcards = {};
//     std::string args_str = "";
//     std::string path2 = "";
//     if (path.find("?") != std::string::npos) {
//         BRED("? found\n");
//         std::string::size_type const p(path.find_first_of('?'));
//         path2 = path.substr(0, p);
//         args_str = path.substr(p+1, path.size());
//     } else {
//         path2 = path;
//     }
//     request->path = path2;
//     for (auto d : dirs) {
//         if (d.size() != 0) {
//             if (d.at(0) == ':') {
//                 wildcards.push_back(d);
//                 signature += "x";
//             }
//             dirs.push_back(d);
//             int sym = _router->registerSymbol(d);
//             signature += std::to_string(sym) + "-";
//             printf("dir: %s\n", d.c_str());
//         }
//     }
//     std::vector<std::string> args = {};
//     if (args_str != "") {
//         args = tokenize(args_str, '&');
//     }
//     for (auto w : wildcards) {
//         printf("wc: %s\n", w.c_str());
//     }
//     std::set<std::string> vals;
//     for (auto arg : args) {
//         printf("arg: %s\n", arg.c_str());
//         std::vector<std::string> kv = tokenize(arg, "=");
//         request->kvs[kv[0]] = kv[1];
//         vals.insert(kv[0]);
//     }
//     if(signature.size() != 0) {
//         signature.pop_back();
//     }
//     for (auto s : vals) {
//         printf("-> %s\n", s.c_str());
//     }
//     request->signature = signature;
//     printf("signature: %s\n", signature.c_str());
// }